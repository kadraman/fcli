# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

# For now, github-sast-report and sarif-sast-report actions are exactly the same, apart from the
# following:
# - Different usage information
# - Different default Optional output file name 
# - The sarif-report doesn't impose a limit of 1000 issues
# The reason for having two similar but separate actions is two-fold:
# - We want to explicitly show that fcli supports both GitHub Code Scanning integration (which 
#   just happens to be based on SARIF) and generic SARIF capabilities.
# - Potentially, outputs for GitHub and generic SARIF may deviate in the future, for example if 
#   we want to add SARIF properties that are not supported by GitHub.
# Until the latter situation arises, we should make sure though that both actions stay in sync;
# when updating one, the other should also be updated. and ideally we should have functional tests
# that compare the outputs of both actions. 

author: Fortify
usage:
  header: Generate SARIF report listing SSC SAST vulnerabilities.  
  description: |
    This action generates a SARIF report listing Fortify SAST vulnerabilities, which 
    may be useful for integration with various 3rd-party tools that can ingest SARIF 
    reports. For more information about SARIF, please see
    https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html

config:
  rest.target.default: fod
  
cli.options:
  file:
    names: --file, -f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: fortify-sast.sarif"
    required: false
    default: fortify-sast.sarif
  release:
    names: --release, --rel
    description: "Required release id or <appName>:[<microserviceName>:]<releaseName>"

steps:
  - var.set:
      rel: ${#fod.release(cli.release)}
  - log.progress: Loading static scan summary
  - rest.call:
      staticScanSummary:
        uri:  /api/v3/scans/${rel.currentStaticScanId}/summary
        if:   ${rel.currentStaticScanId!=null}
        on.fail: 
          - log.warn: Unable to load static scan summary, some scan metadata may be missing from the report
  - log.progress: Processing issue data
  - rest.call:
      issues:
        uri: /api/v3/releases/${rel.releaseId}/vulnerabilities?limit=50
        query:
          filters: scantype:Static
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.totalCount} issues
        records.for-each:
          record.var-name: issue
          embed:
            details:
              uri: /api/v3/releases/${rel.releaseId}/vulnerabilities/${issue.vulnId}/details
            recommendations:
              uri: /api/v3/releases/${rel.releaseId}/vulnerabilities/${issue.vulnId}/recommendations
            traces:
              uri: /api/v3/releases/${rel.releaseId}/vulnerabilities/${issue.vulnId}/traces 
          do:
            - var.set:
                rules..: {fmt: rules, if: "${ruleCache==null || ruleCache[issue.checkId]==null}"} 
                ruleCache.${issue.checkId}: true
                results..: {fmt: results}
  - out.write:
      ${cli.file}: {fmt: github-sast-report}
  - if: ${!{'stdout','stderr'}.contains(cli.file)}
    log.info: Output written to ${cli.file}

formatters:
  github-sast-report:
      "$schema": https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json 
      version: '2.1.0'
      runs:
        - tool:
            driver:
              name: 'Fortify on Demand'   
              version: SCA ${staticScanSummary?.staticScanSummaryDetails?.engineVersion?:'version unknown'}; Rulepack ${staticScanSummary?.staticScanSummaryDetails?.rulePackVersion?:'version unknown'}
              rules: ${rules?:{}}
              properties:
                copyright: ${#copyright()}
                applicationName: ${rel.applicationName}
                applicationId: ${rel.applicationId}
                releaseName: ${rel.releaseName}
                releaseId: ${rel.releaseId}
          results: ${results?:{}}
     
  rules:
      id: ${issue.checkId}
      shortDescription:
        text: ${issue.category}
      fullDescription:
        text: |
          ## ${issue.category}
          
          ${#cleanRuleDescription(issue.details?.summary)}
      help:
        text: |
          ${#cleanRuleDescription(issue.details?.explanation)?:'No explanation available'}
          
          ## Recommendations
          
          ${#cleanRuleDescription(issue.recommendations?.recommendations)?:'Not available'}
          
          ## Tips
          
          ${#cleanRuleDescription(issue.recommendations?.tips)?:'Not available'}
          
          ## References
          
          ${#numberedList(#cleanRuleDescription(issue.recommendations?.references)?.split('\n'))?:'Not available'}
          
          ${#copyright()}

  results:
      ruleId: ${issue.checkId}
      message: 
        text: ${#cleanIssueDescription(issue.details?.summary)} [More information](${#fod.issueBrowserUrl(issue)})
      level: ${(issue.severityString matches "(Critical|High)") ? "warning":"note" }
      properties:
        security-severity: ${{Critical:10.0,High:8.9,Medium:6.9,Low:3.9}.get(issue.severityString)+''}
        fortify-severity: ${issue.severityString}
      partialFingerprints:
        issueInstanceId: ${issue.instanceId}
      locations:
        - physicalLocation:
            artifactLocation:
              uri: ${issue.primaryLocationFull}
            region:
              startLine: ${issue.lineNumber==0?1:issue.lineNumber}
              endLine: ${issue.lineNumber==0?1:issue.lineNumber}
              startColumn: ${1}  # Needs to be specified as an expression in order to end up as integer instead of string in JSON
              endColumn: ${80}
      codeFlows: |-
        ${ 
          issue.traces==null ? {}
            : 
            {{ 
                threadFlows: issue.traces.![{
                  locations: traceEntries?.![{
                    location: {
                        message: {
                            text: #htmlToText(displayText).replaceAll("&nbsp;", " ")
                        },
                        physicalLocation: {
                            artifactLocation: {
                                uri: location
                            },
                            region: {
                                startLine: lineNumber==0?1:lineNumber
                            }
                        }
                    }
                  }] 
                }] 
            }} 
        }
      
