# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

# For now, this template uses latest release state to generate PR decorations.
# See corresponding .bak file is SSC module for an example of how to better
# implement this, once FoD supports retrieving new/re-introduced/removed isses
# for a particular scan id/PR number/commit id.

author: Fortify
usage:
  header: (PREVIEW) Add GitHub Pull Request review comments.  
  description: |
    This action adds review comments to a GitHub Pull Request. Currently
    this is marked as PREVIEW as we build out this functionality; later
    versions may have different behavior and/or require different action
    cli. 
    
    The current implementation simply compares current scan results 
    against previous scan results in the given FoD release, listing 
    all new, re-introduced and removed issues in a new PR comment. 
    
    For best results, this fcli action should only be run on GitHub 
    pull_request triggers. Upon PR creation, a new FoD release should 
    be created, copying state from the FoD release that represents the 
    branch into which the PR will be merged, and a new scan should be 
    run on the current PR branch before invoking this fcli action.
    
    This will ensure that scan results for the current PR will be
    compared against the latest scan results for the target branch
    upon PR creation. Optionally, new scans can be run upon PR changes,
    creating new PR comments that show the issue delta compared to the
    previous scan for this PR.

config:
  rest.target.default: fod

    
cli.options:
  release:
    names: --release, --rel
    description: "Required release id or <appName>:[<microserviceName>:]<releaseName>"
  scan-type:
    names: --scan-type, -t
    description: "Scan type for which to list vulnerabilities. Default value: Static"
    required: true
    default: Static
  github-api-url:
    names: --github-api-url
    description: 'Required GitHub API URL. Default value: GITHUB_API_URL environment variable.'
    required: true
    default: ${#env('GITHUB_API_URL')}
  github-token:
    names: --github-token
    description: 'Required GitHub Token. Default value: GITHUB_TOKEN environment variable.'
    required: true
    default: ${#env('GITHUB_TOKEN')}
  github-owner:
    names: --github-owner
    description: 'Required GitHub repository owner. Default value: GITHUB_REPOSITORY_OWNER environment variable.'
    required: true
    default: ${#env('GITHUB_REPOSITORY_OWNER')}
  github-repo:
    names: --github-repo
    description: 'Required GitHub repository. Default value: Taken from GITHUB_REPOSITORY environment variable.'
    required: true
    default: ${#substringAfter(#env('GITHUB_REPOSITORY'),'/')}
  pr:
    names: --pr
    description: "Required PR number. Default value: Taken from GITHUB_REF_NAME environment variable. Note that default value will only work on GitHub pull_request triggers; if this fcli action is invoked through any other GitHub trigger, it will fail unless an explicit PR number is passed through this option." 
    required: true
    default: ${#substringBefore(#env('GITHUB_REF_NAME'),'/')}
  commit:
    names: --commit
    description: 'Required commit hash. Default value: GITHUB_SHA environment variable.'
    required: true
    default: ${#env('GITHUB_SHA')}
  dryrun:
    names: --dryrun
    description: "Set to true to just output PR decoration JSON; don't actually update any PR"
    type: boolean
    required: false
    default: false
    
steps:
  - rest.target:
      github:
        baseUrl: ${cli['github-api-url']}
        headers:
          Authorization: Bearer ${cli['github-token']}
          'X-GitHub-Api-Version': '2022-11-28'
  - var.set:
      rel: ${#fod.release(cli.release)}
  - log.progress: Processing issue data
  - rest.call:
      issues:
        uri: /api/v3/releases/${rel.releaseId}/vulnerabilities?limit=50
        query:
          includeFixed: true
          filters: scantype:${cli['scan-type']}
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.totalCount} issues
        records.for-each:
          record.var-name: issue
          if: ${issue.status!='Existing'}
          embed:
            details:
              uri: /api/v3/releases/${rel.releaseId}/vulnerabilities/${issue.vulnId}/details
          do:
            - var.set:
                removedIssues..: {fmt: mdIssueListItem, if: "${issue.status=='Fix Validated'}"}
                newIssues..: {fmt: mdIssueListItem, if: "${(issue.status=='New' || issue.status=='Reopen')}"}
          
  - log.progress: Generating GitHub request
  - var.set:
      reviewBody: {fmt: reviewBody}
      reviewRequestBody: {fmt: reviewRequestBody}
  - if: ${cli.dryrun}
    log.info: ${reviewRequestBody}
  - if: ${!cli.dryrun}
    rest.call:
        postPRComment:
          method: POST
          uri:    /repos/${cli['github-owner']}/${cli['github-repo']}/pulls/${cli['pr']}/reviews
          target: github
          body:   ${reviewRequestBody}       

formatters:
  reviewRequestBody:
      owner: ${cli['github-owner']}
      repo: ${cli['github-repo']}
      pull_number: ${cli['pr']}
      commit_id: ${cli['commit']}
      body: ${reviewBody}
      event: COMMENT
      # For now, we don't include any source code comments, as this will cause
      # GitHub to return an error if the source file doesn't exist in the repo.
      comments: ${{}} 
      
  reviewBody: |
      ## Fortify vulnerability summary
      
      Any issues listed below are based on comparing the latest scan results against the previous scan results in FoD release [${rel.applicationName}${#isNotBlank(rel.microserviceNae)?'- '+rel.microserviceName:''} - ${rel.releaseName}](${#fod.releaseBrowserUrl(rel)}). This is for informational purposes only and, depending on workflow, may not be an accurate representation of what issues will be introduced into or removed from the target branch when merging this PR.   
      
      ### New Issues
      
      ${newIssues==null 
        ? "* No new or re-introduced issues were detected" 
        : ("* "+#join('\n* ',newIssues))}
        
      ### Removed Issues
      
      ${removedIssues==null 
        ? "* No removed issues were detected" 
        : ("* "+#join('\n* ',removedIssues))}
        
  mdIssueListItem: "${issue.status} (${issue.scantype}) - ${issue.category}:    \n[${issue.primaryLocationFull}${issue.lineNumber==null?'':':'+issue.lineNumber}](${#fod.issueBrowserUrl(issue)})"
      
      
      