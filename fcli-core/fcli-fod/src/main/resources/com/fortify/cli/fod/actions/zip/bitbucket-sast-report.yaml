# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Generate a BitBucket Code Insights report listing FoD SAST vulnerabilities. 
  description: |
    For information on how to import this report into BitBucket, see 
    https://support.atlassian.com/bitbucket-cloud/docs/code-insights/

config:
  rest.target.default: fod
  
cli.options:
  report-file:
    names: --report-file, -r
    description: "Optional report output file name (or 'stdout' / 'stderr'). Default value: bb-fortify-report.json"
    required: false
    default: bb-fortify-report.json
  annotations-file:
    names: --annotations-file, -a
    description: "Optional annotations output file name (or 'stdout' / 'stderr'). Default value: bb-fortify-annotations.json"
    required: false
    default: bb-fortify-annotations.json
  release:
    names: --release, --rel
    description: "Required release id or <appName>:[<microserviceName>:]<releaseName>"
  
steps:
  - var.set:
      rel: ${#fod.release(cli.release)}
  - log.progress: Processing issue data
  - with:
        writers:
          annotations:
            to: ${cli['annotations-file']}
            type: json
        do:
          - rest.call:
              issues:
                uri: /api/v3/releases/${rel.releaseId}/vulnerabilities?limit=50
                query:
                  filters: scantype:Static
                log.progress:
                  page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.totalCount} issues
                records.for-each:
                  record.var-name: issue
                  embed:
                    details:
                      uri: /api/v3/releases/${rel.releaseId}/vulnerabilities/${issue.vulnId}/details
                  do:
                  - writer.append:
                      annotations: {fmt: annotation}
  - var.set:
      report: {fmt: report}
  - out.write:
      ${cli['report-file']}: ${report}
  - if: ${cli['annotations-file']!='stdout' && cli['report-file']!='stdout'}
    log.info: |
        Report written to ${cli['report-file']}
        Annotations written to ${cli['annotations-file']}

formatters:
  report:
      # uuid:
      title: Fortify Scan Report
      details: Fortify on Demand detected ${annotations.count} ${annotations.count==1 ? 'vulnerability':'vulnerabilities'}
      #external_id:
      reporter: Fortify on Demand
      link: ${#fod.releaseBrowserUrl(rel)}
      # remote_link_enabled:
      logo_url: https://bitbucket.org/workspaces/fortifysoftware/avatar
      report_type: SECURITY
      result: ${rel.isPassed ? 'PASSED':'FAILED'}
      data:
        - type: DATE
          title: Last Static Scan # Apparently BB is very strict on how TZ is presented, so we always provide UTC date/time
          value: ${#formatDateTimewithZoneIdAsUTC("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'",rel.staticScanDate?:'1970-01-01T00:00:00',rel.serverZoneId)}
        - type: NUMBER
          title: Rating
          value: ${rel.rating}
        - type: NUMBER
          title: Critical (SAST)
          value: ${rel.staticCritical}
        - type: NUMBER
          title: Critical (Overall)
          value: ${rel.critical}
        - type: NUMBER
          title: High (SAST)
          value: ${rel.staticHigh}
        - type: NUMBER
          title: High (Overall)
          value: ${rel.high}
        - type: NUMBER
          title: Medium (SAST)
          value: ${rel.staticMedium}
        - type: NUMBER
          title: Medium (Overall)
          value: ${rel.medium}
        - type: NUMBER
          title: Low (SAST)
          value: ${rel.staticLow}
        - type: NUMBER
          title: Low (Overall)
          value: ${rel.low}

  annotation:
      external_id: FTFY-${issue.id}
      # uuid:
      annotation_type: VULNERABILITY
      path: ${issue.primaryLocationFull}
      line: ${issue.lineNumber==0?1:issue.lineNumber}
      summary: ${issue.category}
      details: ${#htmlToText(issue.details?.summary)}
      # result: PASSED|FAILED|SKIPPED|IGNORED
      severity: ${(issue.severityString matches "(Critical|High|Medium|Low)") ? issue.severityString.toUpperCase():"LOW"}
      link: ${#fod.issueBrowserUrl(issue)}
      # created_on:
      # updated_on:
