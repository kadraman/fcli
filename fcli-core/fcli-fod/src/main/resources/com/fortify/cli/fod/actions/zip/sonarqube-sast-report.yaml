# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Generate a SonarQube External Issues report listing FoD SAST vulnerabilities. 
  description: |
    For information on how to import this report into SonarQube, see 
    https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/importing-external-issues/external-analyzer-reports/

config:
  rest.target.default: fod
  
cli.options:
  file:
    names: --file, -f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: sq-fortify-sast.json"
    required: false
    default: sq-fortify-sast.json
  file-path-prefix:
    names: --file-path-prefix, --pfx
    description: "Optional prefix for issue file paths"
    required: false
    default: ""
  release:
    names: --release, --rel
    description: "Required release id or <appName>:[<microserviceName>:]<releaseName>"
  
steps:
  - var.set:
      rel: ${#fod.release(cli.release)}
  - log.progress: Processing issue data
  - rest.call:
      issues:
        uri: /api/v3/releases/${rel.releaseId}/vulnerabilities?limit=50
        query:
          filters: scantype:Static
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.totalCount} issues
        records.for-each:
          record.var-name: issue
          do:
            - var.set:
                sq_issues..: {fmt: sq_issues}

  - out.write:
      ${cli.file}: {fmt: sq-sast-report}
  - if: ${!{'stdout','stderr'}.contains(cli.file)}
    log.info: Output written to ${cli.file}

formatters:
  sq-sast-report:
      issues: ${sq_issues?:{}} 

  sq_issues:
      engineId: FortifyOnDemand
      ruleId: ${issue.category}
      severity: ${{'Critical':'CRITICAL','High':'MAJOR','Medium':'MINOR','Low':'INFO'}.get(issue.severityString)}
      type: VULNERABILITY
      primaryLocation:
        message: ${issue.category} - ${#fod.issueBrowserUrl(issue)}
        filePath: ${cli['file-path-prefix']}${issue.primaryLocationFull}
        textRange:
          startLine: ${issue.lineNumber==0?1:issue.lineNumber}
      # effortMinutes:
      # secondaryLocations:
      