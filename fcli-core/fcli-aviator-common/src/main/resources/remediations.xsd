<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="xmlns://www.fortify.com/schema/remediations"
    xmlns="xmlns://www.fortify.com/schema/remediations"
    elementFormDefault="qualified"
    version="1.0">

    <!-- Root element -->
    <xs:element name="Remediations" type="RemediationsType"/>

    <!-- RemediationsType -->
    <xs:complexType name="RemediationsType">
        <xs:sequence>
            <xs:element name="ProjectInfo" type="ProjectInfoType"/>
            <xs:element name="RemediationList" type="RemediationListType"/>
        </xs:sequence>
    </xs:complexType>

    <!-- ProjectInfoType -->
    <xs:complexType name="ProjectInfoType">
        <xs:annotation>
            <xs:documentation>
                Included for consistency with other schemas in the Fortify product portfolio. 
                It is not strictly necessary for processing or applying remediations.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Name" type="xs:string"/>
            <xs:element name="WriteDate" type="xs:dateTime"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RemediationListType -->
    <xs:complexType name="RemediationListType">
        <xs:sequence>
            <xs:element name="Remediation" type="RemediationType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RemediationType -->
    <xs:complexType name="RemediationType">
        <xs:sequence>
            <xs:element name="AuditComment" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Audit Comment (in English) generated by Aviator and added to audit.xml. Included here
                        as well to make remediations.xml more self-contained.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>            
            <xs:element name="FileChanges" type="FileChangesType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="instanceId" type="xs:string" use="required"/>
        <xs:attribute name="writeDate" type="xs:dateTime" use="required">
            <xs:annotation>
                <xs:documentation>
                    Timestamp of the original audit comment in audit.xsd that this remediation corresponds to.
                    This must exactly match the WriteDate of that comment to ensure proper correlation.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <!-- FileChangesType -->
    <xs:complexType name="FileChangesType">
        <xs:annotation>
            <xs:documentation>
                Represents all changes that apply to a single file.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Filename" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Full path of the file within the project. All changes listed below apply to this file.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Hash" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        A MessageDigest / Hash of the original file, encoded in base64. Used to detect whether the file has been modified since the remediation was generated.
                        Initially, only a single hash will be included. In the future, there may be more, as algorithms evolve and we want to maintain compatibility.
                        Clients only need to verify 1 hash.
                        Note: this hash has no security role, and in principle, we could even use a non-secure algorithm without compromising security. However, choosing a secure
                        algorithm avoids having to justify this all the time.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="type" type="xs:string" use="required">
                                <xs:annotation>
                                    <xs:documentation>
                                        Specifies the digest algorithm. Should follow JDK identifiers. For the initial release, must always be "SHA-256". May evolve in the future.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>                
            </xs:element>
            <xs:element name="Change" type="ChangeType" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- ChangeType -->
    <xs:complexType name="ChangeType">
        <xs:sequence>
            <xs:element name="LineFrom" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>
                        First line number (1-based) in the original file to be removed and replaced. A value of 0 indicates insertion at the top.
						
						Note: if there are multiple changes for a single file, all line numbers are relative to the *original* file, even when some of the changes
						insert or delete lines and therefore change line numbers.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="LineTo" type="xs:nonNegativeInteger">
                <xs:annotation>
                    <xs:documentation>
                        Last line number (1-based) to be removed. Must be â‰¥ LineFrom. If equal to LineFrom, this represents an insert. If both are 0, insert at the top.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="OriginalCode" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Original content of the lines to be removed. Used as fallback verification if the source file has changed.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="NewCode" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        Replacement code to be inserted in place of the specified lines.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Context">
                <xs:annotation>
                    <xs:documentation>
                        This is a fragment of the code in which the change occurs. It contains the code from "OriginalCode". When possible,
						it will include 3 lines before the changed code, and 3 lines after the changed code. This may not be possible when the
						change is at the beginning or the end of the file. Through the "before" and "after" attributes, the actual number of lines
						of context is communicated.
						
						By adding the context, we effectively get all the information of a "unified diff", and will allow us to to fuzzy matching on the
						client side when the hash doesn't match.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute name="before" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>
                                        Specifies the number of lines before the changed code that are included in the context.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                            <xs:attribute name="after" type="xs:integer" use="required">
                                <xs:annotation>
                                    <xs:documentation>
                                        Specifies the number of lines after the changed code that are included in the context.
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:attribute>
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

</xs:schema>
