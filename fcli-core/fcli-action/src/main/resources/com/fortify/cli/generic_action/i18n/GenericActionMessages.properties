module=action

# Make sure none of the commands inherit usage header or description of the top-level fcli command
# Note that we define these as usage.* whereas our parent bundle defines fcli.usage.* (with fcli prefix).
# For some reason, overriding fcli.usage.* doesn't work.
usage.header = 
usage.description = 

# fcli action
# The following usage properties are specific to this fcli module and
# can be updated as needed.
fcli.action.usage.header = Manage fcli actions: data export, integration, automation & more.
fcli.action.usage.description.suffix = %n%nThe 'fcli action' module allows for managing and running fcli actions \
  that are not (directly) related to a specific product like SSC or FoD. Fcli also provides \
  'fcli fod action' and 'fcli ssc action' commands for managing and running fcli actions that \
  are specific to these products. \
  %n%nThis product-agnostic action module can be used to manage and run actions that: \
  %n- Don't interact with any product, like a custom action that just runs 'fcli config' commands \
  %n- Optionally interact with either SSC or FoD products, depending on input \
  %n- Interact with both SSC and FoD, for example for synchronizing data between different products 
fcli.action.run.usage.description = This command allows for running built-in or custom actions. As actions \
  may perform potentially dangerous operations like deleting data or posting data to 3rd-party systems, you should \
  only run trusted actions. For this reason, fcli requires confirmation when attempting to run an action without \
  a (valid) signature. \
  %n%n${fcli.action.source.single} 

# The following properties have the same value across all modules that
# provide action commands. When updating any of these values, the same
# updates should be made in the action, ssc, and fod modules.
# For now, we can't have a single definition for these usage properties 
# that are shared across all modules.
# Note that although values should be the same across all modules, property
# names are (slightly) different.
fcli.action.asciidoc.usage.header = Generate action Asciidoc documentation.
fcli.action.asciidoc.file = Asciidoc output file.
fcli.action.get.usage.header = Get action contents.
fcli.action.help.usage.header = Show action usage help.
fcli.action.import.usage.header = Import custom actions.
fcli.action.list.usage.header = List built-in and imported actions.
fcli.action.reset.usage.header = Remove all custom actions.
fcli.action.run.usage.header = Run an action.
fcli.action.sign.usage.header = Sign action.
fcli.action.sign.confirm = Confirm overwriting existing output file.
fcli.action.sign.confirmPrompt = Do you want overwrite existing output file %s?
fcli.action.source.single = The action can be specified as either a simple name or a local or \
  remote action YAML file location. If specified as a simple name, the action will be loaded from \
  the list of built-in and imported custom actions unless the `--from-zip` option is specified, \
  in which case the action will be loaded from the given local or remote zip file. The `--from-zip` \
  option will only be used if action is specified as a simple name, it will be ignored if the action \
  is specified as a local or remote action YAML file location.
fcli.action.usage.description = Fcli supports workflow-style actions defined in YAML files. Many \
  built-in actions are provided, focusing on data export and CI/CD integration. Users can also develop \
  their own custom actions, either from scratch or by customizing built-in actions. If you require any \
  assistance with developing custom actions, please consult with Fortify Professional Services. \
  %n%nThis fcli version supports the following action schema versions: ${fcli.action.supportedSchemaVersions:-See fcli help output}. \
  %n%nActions can potentially perform dangerous operations like deleting data or posting data to 3rd-party \
  systems, so it is recommended to only run trusted actions. Action authors can sign their actions using \
  the `action sign` command; actions without a (valid) signature will require confirmation when trying to \
  run them. Trusted public keys can be configured through the `fcli config public-key` commands, \
  or passed directly using the `--pubkey` option on various action-related commands. ${fcli.action.usage.description.suffix}
fcli.action.get.usage.description = This command allows for listing the YAML contents of built-in or \
  custom actions. This allows for reviewing the operations performed by an action, or for using the action \
  contents as a basis for developing custom actions. \
  %n%n${fcli.action.source.single}
fcli.action.help.usage.description = This command allows for showing the help information for the given \
  built-in or custom action. \
  ${fcli.action.source.single}
fcli.action.import.usage.description = Import one or more custom actions. You can import either a single \
  action YAML file, or a zip-file containing one or more action YAML files. Imported actions will take precedence \
  over built-in action if they have the same name. \
  %n%n${fcli.action.source.single} \
  If only `--from-zip` is specified, all actions from that zip-file will be imported.
fcli.action.list.usage.description = By default, this command lists available built-in and \
  previously imported custom actions. If the `--from-zip` option is specified, this command \
  lists available actions from the given local or remote zip file instead.
fcli.action.reset.usage.description = Remove all previously imported custom actions, restoring \
  fcli configuration to provide the default built-in actions only.
fcli.action.sign.usage.description = This command allows for signing custom actions, allowing those actions \
  to be run without confirmation if the corresponding public key has been imported through the \
  `fcli config public-key import` command or passed in the `--pubkey` option on various action \
  commands. The action to be signed must be a local file. \
  %n%nThis command can use an existing private key for signing, or generate a new key pair if the \
  private key file as specified through the `--with` option doesn't yet exist and `--pubout` is \
  specified to output the corresponding public key. \
  %n%nPrivate keys may also be generated using OpenSSL or similar tools, but note that only RSA keys in PEM format are supported, \
  and only a small set of encryption schemes are supported for encrypted private keys. It is recommended to use AES \
  encryption, which is supported by both native fcli executables and the .jar version of fcli. The latter requires \
  Java 19 or above though to handle AES-encrypted private keys. Following is a sample OpenSSL command for generating an \
  encrypted private key that's supported by fcli for signing: %n  openssl genpkey -algorithm rsa -out private-key.pem -aes256 \
  %n%nFor convenience, when using a pre-existing private key, the `--pubout` option allows for outputting the corresponding \
  public key for use by the `fcli config public-key import` command. Note that public keys will not be automatically added \
  to the fcli trusted public key store; even if this command generates a key pair on the fly, you'll still need to import \
  the generated public key using the `fcli config public-key import` command.

#################################################################################################################
# The following are technical properties that shouldn't be internationalized ####################################
#################################################################################################################

# Property default values that are usually set when running fcli, but which may not be available when 
# generating AsciiDoc man-pages.
fcli.env.default.prefix=FCLI_DEFAULT

# Table output columns configuration
fcli.action.output.table.args = name,author,origin,status,signatureStatus,usageHeader
fcli.action.import.output.table.args = name,author,status,signatureStatus,usageHeader
fcli.action.sign.output.table.args = in,out,publicKeyFingerprint

