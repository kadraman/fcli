# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Collect CI-specific data
  description: |
    This action collects CI-specific data, for example from CI-specific environment
    variables, and sets a CI-agnostic global variable named 'ci'. This is primarily
    used by the SSC/FoD-specific 'ci' actions, but may also be useful for other 
    (custom) actions. Note though that available properties on the global 'ci' 
    variable may change across fcli releases, potentially breaking any custom 
    actions that depend on these properties.

config:
  output: immediate
  
steps:
  # Set default ci values. Where possible, steps below should override these
  # variables with CI-specific values
  - var.set-global:
      ci.name:               # Name of current CI system
      ci.id:                 # Id of current CI system, used to look up <id>-* actions 
      ci.qualifiedRepoName:  # Fully qualified repository name
      ci.sourceBranch:       # The current branch being processed/scanned 
      ci.commitSHA:          # Commit SHA for current commit
  # GitHub
  - if: ${#isNotBlank(#env('GITHUB_REPOSITORY'))}
    var.set-global:
      ci.name:              GitHub
      ci.id:                github
      ci.qualifiedRepoName: ${#env('GITHUB_REPOSITORY')}
      ci.sourceBranch:      ${#env('GITHUB_HEAD_REF')?:#env('GITHUB_REF_NAME')}
      ci.commitSHA:         ${#env('GITHUB_SHA')}
  - if: ${#env('GITLAB_CI')=='true'}
    var.set-global:
      ci.name:              GitLab
      ci.id:                gitlab
      ci.qualifiedRepoName: ${#env('CI_REPOSITORY_URL').replaceAll('[^:]+://[^/]+/(.*)\.git', '$1')}
      ci.sourceBranch:      ${#env('CI_COMMIT_BRANCH')?:#env('CI_MERGE_REQUEST_SOURCE_BRANCH_NAME')}
      ci.commitSHA:         ${#env('CI_COMMIT_SHA')}
  - if: ${#isNotBlank(#env('Build.Repository.Name'))}
    var.set-global:
      ci.name:              Azure DevOps
      ci.id:                ado
      ci.qualifiedRepoName: ${#env('Build.Repository.Name')}
      ci.sourceBranch:      # TODO ${#env('Build.SourceBranch') matches 'refs/pull/.*' ? }
      ci.commitSHA:         ${#env('Build.SourceVersion')}
  - out.write:
      stdout: ${global.ci}
        
            
        
        