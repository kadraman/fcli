# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Generate CI env vars documentation
  description: |
    TODO

config:
  output: immediate
  
cli.options:
  outputDir:
    names: "-d"
    description: Required output directory
  
steps:
  - var.set:
      fodDefinitions: {fmt: fodDefinitions}
      sscDefinitions: {fmt: sscDefinitions}
  - records.for-each:
      from: ${{'fod.all', 'fod.ci', 'ssc.all', 'ssc.ci'}} 
      record.var-name: type
      do:
      - var.rm:
          - asciiDocCells
      - var.set:
          module: ${#substringBefore(type, '.')}
          asciiDocActionUrl: ${module}-actions.html
          includeSessionEnvVars: ${type.endsWith('.all')}
          definitions: ${type.startsWith('fod')?fodDefinitions:sscDefinitions}
          sessionEnvVars: ${definitions.session}
          commonEnvVarProperties: ${definitions.commonEnvVarProperties}
          commonDefinitions: {fmt: commonDefinitions}
          ciEnvVars: ${{definitions.preScan, commonDefinitions.package, definitions.scan, definitions.postScan}} 
      - with:
          writers:
            tableWriter:
              to: var:textTable
              type: table
              style: border
          do:
            # Append FoD/SSC-specific session env vars if these need to be included
          - if: ${includeSessionEnvVars}
            records.for-each:
              from: ${sessionEnvVars}
              record.var-name: envVar 
              do:
              - writer.append:
                  tableWriter: {fmt: textCell}
              - var.set:
                  asciiDocCells..: {fmt: asciiDocCell}
            # Append other ci env vars. We may need to split ciEnvVars and commonEnvVars
            # to allow for intermingling SSC/FoD-specific and common env vars to build
            # a table in logical order.
          - records.for-each:
              from: ${ciEnvVars}
              record.var-name: envVars
              do:
              - records.for-each:
                  from: ${envVars}
                  record.var-name: envVar 
                  do:
                    - writer.append:
                        tableWriter: {fmt: textCell}
                    - var.set:
                        asciiDocCells..: {fmt: asciiDocCell}
      - out.write:
          ${cli.outputDir}/ci-envvars-${type}.txt: {fmt: textTable}
          ${cli.outputDir}/ci-envvars-${type}.adoc: {fmt: asciiDocTable}
          
formatters:
  # TODO realNode references should ideally be fixed in action framework
  textTable: |
    ${textTable}
    
    * Any fcli action references in this table refer to actions in the `fcli ${module}` module; please see
      `fcli ${module} action help <action-name>` for more information.
  textCell:
    Environment Variable: ${(envVar.realNode==null?envVar:envVar.realNode).names}
    Description: ${(envVar.realNode==null?envVar:envVar.realNode).desc.replaceAll('actionRef:([\w-_]+)(#[\w-_]+)', '`$1`')}
  asciiDocTable: |
    [%autowidth]
    |===
    |Environment Variable|Description 
    
    ${#join("", asciiDocCells)}
    |===
  asciiDocCell: |
    |${(envVar.realNode==null?envVar:envVar.realNode).names.replaceAll('\n', ' +\\n')}
    |${(envVar.realNode==null?envVar:envVar.realNode).desc.replaceAll('\n', ' +\\n').replaceAll('actionRef:([\w-_]+)(#[\w-_]+)', 'link:'+asciiDocActionUrl+'$2[$1]')}
    
  fodDefinitions:
    commonEnvVarProperties:
    session:
      - names: FOD_URL
        desc: >-  
          Fortify on Demand URL, for example `https://ams.fortify.com`. This must be rendered by the CI/CD system
          as plain text, not as a masked secret/variable.
      - names: FOD_CLIENT_ID\nFOD_CLIENT_SECRET
        desc: >-
          Required when authenticating with an API key: Fortify on Demand Client ID (API key) and Secret (API secret).
      - names: FOD_TENANT\nFOD_USER\nFOD_PASSWORD
        desc: >-
          Required when authenticating with user credentials: Fortify on Demand tenant, user and password. It is
          recommended to use a Personal Access Token instead of an actual user password.
      - names: FOD_LOGIN_EXTRA_OPTS
        desc: >-
          Extra login options, for example for disabling SSL checks or changing connection time-outs; see 
          `fcli fod session login` documentation.
    preScan:
      - names: FOD_RELEASE
        desc: >-
          Fortify on Demand release to use with this action. This should be specified as `<app-name>:<release-name>`
          (for non-microservices applications) or `<app-name>:<microservice-name>:<release-name>` (for microservices 
          applications). Default value is based on repository and branch name, for example `myOrg/myRepo:myBranch`.
          Note that you'll need to explicitly configure `FOD_RELEASE` for microservices applications, as the default
          value lacks a microservice name.
      - names: DO_SETUP\nSETUP_ACTION\nSETUP_EXTRA_OPTS
        desc: >-
          If `DO_SETUP` is set not set to `false`, the application and/or release will be created if they do not
          yet exist, and static scan settings will be configured if not configured already, using the
          fcli-provided actionRef:setup-release#_setup_release action, or, if specified, the custom fcli action specified through
          `SETUP_ACTION`. Extra options for the fcli action can be passed through the `SETUP_EXTRA_OPTS`
          environment variable.\n\nDepending on your Git workflow, it is recommended to copy state from the
          release representing your default branch by passing the `--copy-from` option through
          `SETUP_EXTRA_OPTS`. To allow this action to create new applications, depending on FoD version,
          you may (also) need to provide the `--app-owner <user id or name>` option through `SETUP_EXTRA_OPTS`.
    scan:
      - names: DO_SAST_SCAN\nSAST_SCAN_EXTRA_OPTS\nDO_SAST_WAIT
        desc: >-
          For now, this fcli action only supports running a SAST scan, which is enabled by default. The
          `SAST_SCAN_EXTRA_OPTS` environment variable can be used to pass extra options to the `fcli fod sast-scan start`
          command. By default, this action will wait until the scan has been completed, unless `DO_SAST_WAIT`
          is set to `false`; note that any post-scan tasks will be skipped in this case.
    postScan:
      - names: DO_RELEASE_SUMMARY\nRELEASE_SUMMARY_ACTION\nRELEASE_SUMMARY_EXTRA_OPTS
        desc: >-
          If `DO_RELEASE_SUMMARY` is not set to `false`, a release summary will be generated using the
          fcli-provided actionRef:release-summary#_release_summary action or, if specified, the custom fcli action specified through
          `RELEASE_SUMMARY_ACTION`. Extra options for the fcli action can be specified through the
          `RELEASE_SUMMARY_EXTRA_OPTS` environment variable, which may include fcli options to allow
          unsigned custom actions to be used.
      - names: DO_CHECK_POLICY\nCHECK_POLICY_ACTION\nCHECK_POLICY_EXTRA_OPTS
        desc: >-
          If `DO_CHECK_POLICY` is set to true (implied if any of the other two `CHECK_POLICY_*` variables
          are set), a policy check will be run after scan completion using the fcli-provided
          actionRef:check-policy#_check_policy action or, if specified, the custom fcli action specified through
          `CHECK_POLICY_ACTION`. Extra options for a custom fcli action can be passed through the
          `CHECK_POLICY_EXTRA_OPTS` environment variable, which may include fcli options to allow
          unsigned custom actions to be used.
      - names: DO_PR_COMMENT\nPR_COMMENT_ACTION\nPR_COMMENT_EXTRA_OPTS
        desc: >-
          (PREVIEW) If `DO_PR_COMMENT` is set to true (implied if any of the other two `PR_COMMENT_*` variables
          are set), a Pull Request or Merge Request comment will be generated using an fcli-provided action
          matching the current CI system like actionRef:github-pr-comment#_github_pr_comment or, if specified, the custom fcli action
          specified through `PR_COMMENT_ACTION`. Extra options for the fcli action can be specified through
          the `PR_COMMENT_EXTRA_OPTS` environment variable, which may include fcli options to allow unsigned
          custom actions to be used.
      - names: DO_SAST_EXPORT\nSAST_EXPORT_ACTION\nSAST_EXPORT_EXTRA_OPTS
        desc: >-
          If `DO_SAST_EXPORT` is not set to `false` and a SAST scan was completed, the SAST vulnerability
          data will be exported into a CI-specific format using an fcli-provided action matching the current
          CI system like actionRef:github-sast-report#_github_sast_report or actionRef:gitlab-sast-report#_gitlab_sast_report, or, if specified, the custom fcli action
          specified through `SAST_EXPORT_ACTION`. Extra options for the fcli action can be specified through the
          `SAST_EXPORT_EXTRA_OPTS` environment variable, which may include fcli options to allow unsigned custom
          actions to be used.
          
  sscDefinitions:
    session:
      - names: SSC_URL
        desc: >-
            Software Security Center (SSC) URL, for example `https://ssc.customer.fortifyhosted.net/`. This must be 
            rendered by the CI/CD system as plain text, not as a masked secret/variable.
      - names: SSC_TOKEN
        desc: >-
            Required when authenticating with an SSC token (recommended). Most actions should work fine with a CIToken.
      - names: SSC_USER\nSSC_PASSWORD
        desc: >-
            Required when authenticating with SSC user credentials.
      - names: SC_SAST_TOKEN
        desc: >-
            ScanCentral SAST Client Authentication Token for authenticating with ScanCentral SAST Controller. This 
            environment variable is required when running a ScanCentral SAST scan.
      # TODO Add DEBRICKED_TOKEN once implemented
      - names: SSC_LOGIN_EXTRA_OPTS
        desc: >-
            Extra SSC login options, for example for disabling SSL checks or changing connection time-outs; 
            see `fcli ssc session login` documentation.        
    preScan:
      - names: SSC_APPVERSION
        desc: >-
          Fortify SSC application version to use with this action. This should be specified as `<app-name>:<version-name>`. 
          Default value is based on repository and branch name, for example `myOrg/myRepo:myBranch`.
      - names: DO_SETUP\nSETUP_ACTION\nSETUP_EXTRA_OPTS
        desc: >-
          If `DO_SETUP` is set not set to `false`, the application and/or version will be created if they do not yet
          exist using the fcli-provided actionRef:setup-appversion#_setup_appversion action, or, if specified, the custom fcli action specified
          through `SETUP_ACTION`. Extra options for the fcli action can be passed through the `SETUP_EXTRA_OPTS` 
          environment variable.\n\nDepending on your Git workflow, it is recommended to copy state from the
          application version representing your default branch by passing the `--copy-from` option through
          `SETUP_EXTRA_OPTS`.
    scan:
      - names: DO_SAST_SCAN\nSAST_SCAN_EXTRA_OPTS\nDO_SAST_WAIT
        desc: >-
            For now, this fcli action only supports running a SAST scan, which is enabled by default. The
            `SAST_SCAN_EXTRA_OPTS` environment variable can be used to pass extra options to the `fcli sc-sast scan start`
            command. By default, this action will wait until the scan has been completed, unless `DO_SAST_WAIT`
            is set to `false`; note that any post-scan tasks will be skipped in this case.
    postScan:
      - names: DO_APPVERSION_SUMMARY\nAPPVERSION_SUMMARY_ACTION\nAPPVERSION_SUMMARY_EXTRA_OPTS
        desc: >-
          If `DO_APPVERSION_SUMMARY` is not set to `false`, an application version summary will be generated using the
          fcli-provided actionRef:appversion-summary#_appversion_summary action or, if specified, the custom fcli action specified through
          `APPVERSION_SUMMARY_ACTION`. Extra options for the fcli action can be specified through the
          `APPVERSION_SUMMARY_EXTRA_OPTS` environment variable, which may include fcli options to allow
          unsigned custom actions to be used.
      - names: DO_CHECK_POLICY\nCHECK_POLICY_ACTION\nCHECK_POLICY_EXTRA_OPTS
        desc: >-
          If `DO_CHECK_POLICY` is set to true (implied if any of the other two `CHECK_POLICY_*` variables
          are set), a policy check will be run after scan completion using the fcli-provided
          actionRef:check-policy#_check_policy action or, if specified, the custom fcli action specified through
          `CHECK_POLICY_ACTION`. Extra options for a custom fcli action can be passed through the
          `CHECK_POLICY_EXTRA_OPTS` environment variable, which may include fcli options to allow
          unsigned custom actions to be used.
      - names: DO_PR_COMMENT\nPR_COMMENT_ACTION\nPR_COMMENT_EXTRA_OPTS
        desc: >-
          (PREVIEW) If `DO_PR_COMMENT` is set to true (implied if any of the other two `PR_COMMENT_*` variables
          are set), a Pull Request or Merge Request comment will be generated using an fcli-provided action
          matching the current CI system like actionRef:github-pr-comment#_github_pr_comment or, if specified, the custom fcli action
          specified through `PR_COMMENT_ACTION`. Extra options for the fcli action can be specified through
          the `PR_COMMENT_EXTRA_OPTS` environment variable, which may include fcli options to allow unsigned
          custom actions to be used.
      - names: DO_SAST_EXPORT\nSAST_EXPORT_ACTION\nSAST_EXPORT_EXTRA_OPTS
        desc: >-
          If `DO_SAST_EXPORT` is not set to `false` and a SAST scan was completed, the SAST vulnerability
          data will be exported into a CI-specific format using an fcli-provided action matching the current
          CI system like actionRef:github-sast-report#_github_sast_report or actionRef:gitlab-sast-report#_gitlab_sast_report, or, if specified, the custom fcli action
          specified through `SAST_EXPORT_ACTION`. Extra options for the fcli action can be specified through the
          `SAST_EXPORT_EXTRA_OPTS` environment variable, which may include fcli options to allow unsigned custom
          actions to be used.
                  
  commonDefinitions:
    package:
      - names: PACKAGE_ACTION\nPACKAGE_ACTION_EXTRA_OPTS
        desc: >- 
          By default, when running a SAST scan, the fcli actionRef:package#_package action is used to (optionally) package the source code
          to be scanned; see next entry for information on how to configure the default actionRef:package#_package action. If the standard
          fcli actionRef:package#_package action doesn't meet your needs, for example if you want to perform a local translation using
          Fortify Static Code Analyzer, you can use `PACKAGE_ACTION` to use a custom action for packaging, optionally
          providing extra options to this custom action through the `PACKAGE_ACTION_EXTRA_OPTS` environment variable.
          Note that any custom action must set the `global.package.output` action variable, pointing to the package or
          MBS file to be scanned.
      - names: USE_PACKAGE\nPACKAGE_EXTRA_OPTS\nSC_CLIENT_VERSION\nSOURCE_DIR\nTOOL_DEFINITIONS
        desc: >-
          These environment variables define packaging behavior. If `USE_PACKAGE` is specified, packaging will be skipped
          and the given package or MBS file (which must already exist) will be used. To pass additional options to the
          `scancentral package` command like `-bt` or `-bf`, use `PACKAGE_EXTRA_OPTS`.\nBy default:\n
          - Latest available ScanCentral Client version will be used for packaging; use `SC_CLIENT_VERSION`
          to specify a different version.\n
          - Current working directory will be packaged; use `SOURCE_DIR` to package a different directory.\n
          - Debug logging for Scancentral Client is disabled; pass --debug on the fcli invocation to enable debug logging.\n
          - Tool definitions to identify available ScanCentral Client versions will be downloaded from the default
          location; use `TOOL_DEFINITIONS` to use customized tool definitions.\n
        
      