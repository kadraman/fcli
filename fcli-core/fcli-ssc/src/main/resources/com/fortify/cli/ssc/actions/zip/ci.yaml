# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: (PREVIEW) Run SSC CI pipeline
  description: |
    This action can be used to run a full, standardized CI pipeline that performs the
    following activities:
    - Create & configure SSC application version if needed
    - Package source code
    - Submit SAST scan request
    - Wait for SAST scan completion
    - Perform post-scan activities, like checking policy outcome, exporting results, ...
    
    Configuration for this fcli action is done through environment variables; the
    table below lists the environment variables supported by this action.
    
    ${isAsciiDoc?'----\n':''}${#include('/ci-envvars-ssc.ci.txt')}${isAsciiDoc?'\n----':''}

config:
  output: immediate
  rest.target.default: ssc
  run.fcli.status.log.default: true    # By default, we log all exit statuses
  run.fcli.status.check.default: false # By default, we want to continue on fcli failures
  
steps:
  # Configure module; allows for copying/re-using similar #actionCmd invocations in FoD ci action
  - var.set:
      module: ssc
      
  # Run ci-vars action to obtain CI data
  - run.fcli:
      ci-vars: 
        cmd: ${#actionCmd('CI_VARS', module, 'ci-vars')}
        status.check: true
        on.success:
          - var.set:
              global.ci.av: ${#env('SSC_APPVERSION')?:global.ci.defaultFortifyRepo}
          - if: ${global.ci.av==null}
            throw: SSC application version must be specified through SSC_APPVERSION environment variable
            
  # Configure CI steps to be run
  # Note that any data produced by the actual steps cannot be referenced here. For example,
  # as at this point we haven't run the package action yet, we can't add '-f ${global.package.output}'
  # in sastStart.args; this option will need to be passed explicitly on the sastStart fcli invocation.
  - var.set:
      module: ssc           # Allows for copying/re-using similar #actionCmd invocations in FoD ci action
      # Determine scan types to run
      sca.skipReason:   # TODO
      sca.skip: true
      dast.skipReason:  # TODO
      dast.skip: true
      sast.skipReason: > # Enabled by default, unless explicitly disabled or other scan type requested
        ${#env('DO_SAST_SCAN')=='false' ? 'SAST scan disabled as DO_SAST_SCAN==false'
          : #env('DO_SAST_SCAN')!='true' && (!sca.skip || !dast.skip) ? 'SAST scan disabled as DO_SAST_SCAN!=true and other scan type requested'
          : null
        }
      sast.skip: ${#isNotBlank(sast.skipReason)}
      # Actions/commands to run, and, if applicable, a skip reason based on DO_*, *_ACTION, and *_EXTRA_OPTS
      SETUP.action: setup-appversion
      SETUP.skipFromEnvReason: ${#actionCmdSkipFromEnvReason('SETUP', false)} # Not skipped by default
      SAST_SCAN.cmd: fcli sc-sast scan start
      SAST_SCAN.skipFromEnvReason: ${sast.skipReason}
      SAST_WAIT.cmd: fcli sc-sast scan wait-for
      SAST_WAIT.skipFromEnvReason: ${#fcliCmdSkipFromEnvReason('SAST_WAIT', false)} # Not skipped by default
      PR_COMMENT.action: ${global.ssc.prCommentAction}
      PR_COMMENT.skipFromEnvReason: ${#actionCmdSkipFromEnvReason('PR_COMMENT', true)} # Skipped by default
      POLICY_CHECK.action: check-policy
      POLICY_CHECK.skipFromEnvReason: ${#actionCmdSkipFromEnvReason('POLICY_CHECK', true)} # Skipped by default
      JOB_SUMMARY.action: appversion-summary
      JOB_SUMMARY.skipFromEnvReason: ${#actionCmdSkipFromEnvReason('JOB_SUMMARY', false)} # Not skipped by default
      SAST_EXPORT.action: ${global.ssc.sastExportAction}
      SAST_EXPORT.skipFromEnvReason: ${#actionCmdSkipFromEnvReason('SAST_EXPORT', false)} # Not skipped by default
      

  # Run the fcli commands that make up this CI pipeline
  - run.fcli:
      SETUP:
        cmd: ${#actionCmd('SETUP', module, 'setup-appversion')} --av "${global.ci.av}"
        status.check: true
        skip.if:
          ${SETUP.skipFromEnvReason!=null}: ${SETUP.skipFromEnvReason}
          
      PACKAGE: 
        cmd: ${#actionCmd('PACKAGE_ACTION', module, 'package')}
        skip.if:
          ${sast.skip}: ${sast.skipReason}
          
      SAST_SCAN: 
        cmd: ${#fcliCmd('SAST_SCAN', SAST_SCAN.cmd)} --publish-to "${global.ci.av}" --store sc_sast_scan -f "${global.package.output}"
        skip.if:
          ${SAST_SCAN.skipFromEnvReason!=null}: ${SAST_SCAN.skipFromEnvReason}
          ${PACKAGE.failed}: Packaging failed
          
      SAST_WAIT:
        cmd: "${#fcliCmd('SAST_WAIT', SAST_WAIT.cmd)} ::sc_sast_scan::"
        skip.if:
          ${SAST_WAIT.skipFromEnvReason!=null}: ${SAST_WAIT.skipFromEnvReason}
          ${SAST_SCAN.skipped}: SAST scan was skipped
          ${SAST_SCAN.failed}: SAST scan failed
          
      POLICY_CHECK:
        cmd: ${#actionCmd('POLICY_CHECK', module, POLICY_CHECK.action)} --av "${global.ci.av}"
        stdout: collect
        skip.if: # TODO When SCA/DAST scan have been implemented, test their publish skip status as well
          ${POLICY_CHECK.skipFromEnvReason!=null}: ${POLICY_CHECK.skipFromEnvReason}
          ${SAST_WAIT.skipped}: SAST scan publishing was skipped
          ${SAST_WAIT.failed}: SAST scan publishing failed
          
      JOB_SUMMARY:
        cmd: ${#actionCmd('JOB_SUMMARY', module, JOB_SUMMARY.action)} --av "${global.ci.av}"
        stdout: collect
        skip.if: # TODO When SCA/DAST scan have been implemented, test their publish skip status as well
          ${JOB_SUMMARY.skipFromEnvReason!=null}: ${JOB_SUMMARY.skipFromEnvReason}
          ${SAST_WAIT.skipped}: SAST scan publishing was skipped
          ${SAST_WAIT.failed}: SAST scan publishing failed
          
      PR_COMMENT:
        cmd: ${#actionCmd('PR_COMMENT', module, PR_COMMENT.action)} --av "${global.ci.av}"
        skip.if: # TODO When SCA/DAST scan have been implemented, test their publish skip status as well
          ${PR_COMMENT.skipFromEnvReason!=null}: ${PR_COMMENT.skipFromEnvReason}
          ${SAST_WAIT.skipped}: SAST scan publishing was skipped
          ${SAST_WAIT.failed}: SAST scan publishing failed
          # TODO Check whether current run is for a PR
          
      SAST_EXPORT:
        cmd: ${#actionCmd('EXPORT', module, SAST_EXPORT.action)} --av "${global.ci.av}"
        skip.if:
          ${SAST_EXPORT.skipFromEnvReason!=null}: ${SAST_EXPORT.skipFromEnvReason}
          ${SAST_WAIT.skipped}: SAST scan publishing was skipped
          ${SAST_WAIT.failed}: SAST scan publishing failed
  - out.write:
      stdout: {fmt: summary}
  # TODO Generate exit code if any of the above failed
   
# TODO Only show policy status if not skipped? Or just show SKIPPED if skipped?
# TODO Add info on what scans were run, and their status
formatters:
  summary: |
  
  
    Fcli Security Policy status:
    
    ${POLICY_CHECK.stdout}
    
    Application version summary:
        
    ${JOB_SUMMARY.stdout}
      