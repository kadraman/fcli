# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: Generate a SonarQube External Issues report listing SSC SAST vulnerabilities. 
  description: |
    For information on how to import this report into SonarQube, see 
    https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/importing-external-issues/external-analyzer-reports/
  
config:
  rest.target.default: ssc
  
cli.options:
  file:
    names: --file, -f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: sq-fortify-sast.json"
    required: false
    default: sq-fortify-sast.json
  file-path-prefix:
    names: --file-path-prefix, --pfx
    description: "Optional prefix for issue file paths"
    required: false
    default: ""
  appversion:
    names: --appversion, --av
    description: "Required application version id or <appName>:<versionName>"
  filterset:
    names: --filterset, --fs
    description: "Optional filter set name or guid from which to load issue data. Default value: Default filter set for given application version"
    required: false
  page-size:
    names: --page-size
    description: "Number of vulnerabilities to retrieve at a time. Higher numbers may reduce time required to build the report, at the cost of increased memory usage (on both fcli and SSC), and could potentially negatively affect overall SSC performance or result in read time-outs (see --socket-timeout option on fcli ssc session login command). Default value: 100"
    required: false
    default: "100"
  
steps:
  - var.set:
      av: ${#ssc.appVersion(cli.appversion)}
      fs: ${#ssc.filterSet(av, cli.filterset)}
  - log.progress: Processing issue data
  - rest.call:
      issues:
        uri: /api/v1/projectVersions/${av.id}/issues
        query:
          filter: ISSUE[11111111-1111-1111-1111-111111111151]:SCA
          filterset: ${fs.guid}
          limit: ${cli['page-size']}
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
        records.for-each:
          record.var-name: issue
          do:
            - var.set:
                sq_issues..: {fmt: sq_issues}
  - out.write:
      ${cli.file}: {fmt: sq_output} 
  - if: ${!{'stdout','stderr'}.contains(cli.file)}
    log.info: Output written to ${cli.file}
     
formatters:
  sq_output:
      issues: ${sq_issues?:{}}
  sq_issues:
      engineId: FortifySCA
      ruleId: ${issue.issueName}
      severity: ${{'Critical':'CRITICAL','High':'MAJOR','Medium':'MINOR','Low':'INFO'}.get(issue.friority)}
      type: VULNERABILITY
      primaryLocation:
        message: ${issue.issueName} - ${#ssc.issueBrowserUrl(issue,fs)}
        filePath: ${cli['file-path-prefix']}${issue.fullFileName}
        textRange:
          startLine: ${issue.lineNumber==0?1:issue.lineNumber}
      # effortMinutes:
      # secondaryLocations: