# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

# For now, this template uses latest application state to generate PR decorations.
# See corresponding .bak file for a better but incomplete (due to SSC limitations)
# implementation based on artifact id.

author: Fortify
usage:
  header: (PREVIEW) Add GitHub Pull Request review comments.  
  description: |
      This action adds review comments to a GitHub Pull Request. Currently
      this is marked as PREVIEW as we build out this functionality; later
      versions may have different behavior and/or require different action
      parameters. 
      
      The current implementation simply compares current scan results 
      against previous scan results in the given SSC application version, 
      listing all new, re-introduced and removed issues in a new PR comment. 
      
      For best results, this fcli action should only be run on GitHub 
      pull_request triggers. Upon PR creation, a new SSC application version 
      should be created, copying state from the SSC application version that 
      represents the branch into which the PR will be merged, and a new scan 
      should be run on the current PR branch before invoking this fcli action.
      
      This will ensure that scan results for the current PR will be
      compared against the latest scan results for the target branch
      upon PR creation. Optionally, new scans can be run upon PR changes,
      creating new PR comments that show the issue delta compared to the
      previous scan for this PR.

config:
  rest.target.default: ssc
        
parameters:
  - name: appversion
    cliAliases: av
    description: "Required application version id or <appName>:<versionName>"
    type: appversion_single
  - name: filterset
    cliAliases: fs
    description: "Filter set name or guid from which to load issue data. Default value: Default filter set for given application version"
    required: false
    type: filterset
  - name: analysis-type
    cliAliases: t
    description: "Analysis type for which to list vulnerabilities. Default value: SCA"
    required: true
    defaultValue: SCA
  - name: github-api-url
    description: 'Required GitHub API URL. Default value: GITHUB_API_URL environment variable.'
    required: true
    defaultValue: ${#env('GITHUB_API_URL')}
  - name: github-token
    description: 'Required GitHub Token. Default value: GITHUB_TOKEN environment variable.'
    required: true
    defaultValue: ${#env('GITHUB_TOKEN')}
  - name: github-owner
    description: 'Required GitHub repository owner. Default value: GITHUB_REPOSITORY_OWNER environment variable.'
    required: true
    defaultValue: ${#env('GITHUB_REPOSITORY_OWNER')}
  - name: github-repo
    description: 'Required GitHub repository. Default value: Taken from GITHUB_REPOSITORY environment variable.'
    required: true
    defaultValue: ${#substringAfter(#env('GITHUB_REPOSITORY'),'/')}
  - name: pr
    description: "Required PR number. Default value: Taken from GITHUB_REF_NAME environment variable. Note that default value will only work on GitHub pull_request triggers; if this fcli action is invoked through any other GitHub trigger, it will fail unless an explicit PR number is passed through this option."
    required: true
    defaultValue: ${#substringBefore(#env('GITHUB_REF_NAME'),'/')}
  - name: commit
    description: 'Required commit hash. Default value: GITHUB_SHA environment variable.'
    required: true
    defaultValue: ${#env('GITHUB_SHA')}
  - name: dryrun
    description: "Set to true to just output PR decoration JSON; don't actually update any PR"
    type: boolean
    required: false
    defaultValue: false
    
steps:
  - rest.target:
      - name: github
        baseUrl: ${parameters['github-api-url']}
        headers:
          Authorization: Bearer ${parameters['github-token']}
          'X-GitHub-Api-Version': '2022-11-28'
  - log.progress: Processing issue data
  - rest.call:
    - name: issues
      uri: /api/v1/projectVersions/${parameters.appversion.id}/issues?limit=200
      query:
        showremoved: true
        filter: ISSUE[11111111-1111-1111-1111-111111111151]:${parameters['analysis-type']}
        filterset: ${parameters.filterset.guid}
      pagingProgress:
        postPageProcess: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
      forEach:
        name: issue
        if: ${issue.scanStatus!='UPDATED'}
        embed:
          - name: details
            uri: /api/v1/issueDetails/${issue.id}
        do:
          - if: ${issue.scanStatus=='REMOVED'}
            var.set:
              removedIssues..: ${#action.fmt('mdIssueListItem',#root)}
          - if: ${(issue.scanStatus=='NEW' || issue.scanStatus=='REINTRODUCED')}
            var.set:
              newIssues..: ${#action.fmt('mdIssueListItem',#root)}
          
  - log.progress: Generating GitHub request
  - var.set:
      reviewBody: ${#action.fmt('reviewBody',#root)}
      reviewRequestBody: ${#action.fmt('reviewRequestBody',#root)}
  - if: ${parameters.dryrun}
    file.write:
      - to: stdout
        value: ${reviewRequestBody}
  - if: ${!parameters.dryrun}
    rest.call:
      - name:   GitHub PR review
        method: POST
        uri:    /repos/${parameters['github-owner']}/${parameters['github-repo']}/pulls/${parameters['pr']}/reviews
        target: github
        body:   ${reviewRequestBody}       

formatters:
  - name: reviewRequestBody
    contents:
      owner: ${parameters['github-owner']}
      repo: ${parameters['github-repo']}
      pull_number: ${parameters['pr']}
      commit_id: ${parameters['commit']}
      body: ${reviewBody}
      event: COMMENT
      # For now, we don't include any source code comments, as this will cause
      # GitHub to return an error if the source file doesn't exist in the repo.
      comments: ${{}} 
      
  - name: reviewBody
    contents: |
      ## Fortify vulnerability summary
      
      Any issues listed below are based on comparing the latest scan results against the previous scan results in SSC application version [${parameters.appversion.project.name} - ${parameters.appversion.name}](${#ssc.appversionBrowserUrl(parameters.appversion,null)}). This is for informational purposes only and, depending on workflow, may not be an accurate representation of what issues will be introduced into or removed from the target branch when merging this PR.
      
      ### New Issues
      
      ${newIssues==null 
        ? "* No new or re-introduced issues were detected" 
        : ("* "+#join('\n* ',newIssues))}
        
      ### Removed Issues
      
      ${removedIssues==null 
        ? "* No removed issues were detected" 
        : ("* "+#join('\n* ',removedIssues))}
        
  - name: mdIssueListItem
    contents: "${issue.scanStatus} (${issue.engineCategory}) - ${issue.issueName}:    \n[${issue.fullFileName}${issue.lineNumber==null?'':':'+issue.lineNumber}](${#ssc.issueBrowserUrl(issue,parameters.filterset)})"
      