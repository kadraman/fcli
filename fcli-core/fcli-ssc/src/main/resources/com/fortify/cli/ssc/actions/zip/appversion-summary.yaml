# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

author: Fortify
usage:
  header: (PREVIEW) Generate application version summary. 
  description: |
    This action generates a short summary listing issue counts and other statistics
    for a given application version. Based on user feedback on this initial version 
    of this action, parameters and output of this action may change in the next 
    couple of fcli releases.

config:
  rest.target.default: ssc
  
cli.options:
  file:
    names: --file, -f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: stdout"
    required: false
    default: stdout
  appversion:
    names: --appversion, --av
    description: "Required application version id or <appName>:<versionName>"
  filtersets:
    names: --filtersets, --fs
    description: "Comma-separated list of filter set names, guid's or 'default' to display in the summary. If not specified, all filter sets will be included."
    required: false
  
steps:
  # Set output date format and convert filtersets parameter to array
  - var.set:
      av: ${#ssc.appVersion(cli.appversion)}
      dateFmt: YYYY-MM-dd HH:mm
      filtersetsArray: ${cli.filtersets?.split(',')}
      issueStateNames: ${{'NEW', 'REINTRODUCED', 'REMOVED', 'UPDATED'}}
  # Load SSC issue selector filter by sets
  - log.progress: Loading issue selector sets
  - rest.call:
      issueSelectorSet:
        uri:  /api/v1/projectVersions/${av.id}/issueSelectorSet?fields=filterBySet
  - var.set:
      analysisTypes: ${issueSelectorSet.filterBySet.^[displayName=='Analysis Type'].selectorOptions}
  - rest.call:
      artifactsResponse:
        if: ${analysisTypes!=null && analysisTypes.size()>0} 
        uri:  /api/v1/projectVersions/${av.id}/artifacts
        type: paged
        query:
          embed: scans
        records.for-each:
          record.var-name: artifact
          breakIf: ${analysizedScans?.![type]?.containsAll(analysisTypes.![displayName])?:false}
          do:
            - records.for-each:
                from: ${artifact._embed.scans}
                record.var-name: scan
                do:
                  - if: ${lastScans==null || lastScans[scan.type]==null}
                    var.set:
                      lastScans.${analysisTypes?.^[guid==#root.scan.type].displayName}: ${scan}
                  - var.set:
                      analyzedScans..: ${scan}
                    
  # Collect SSC filter set data, together with issue counts by analysis type & folder
  # TODO Can we use ${#ssc.filterSet(av, filtersetTitleOrId)} instead?
  - rest.call:
      filterSetsResponse:
        uri:  /api/v1/projectVersions/${av.id}/filterSets
        type: paged
        records.for-each:
          # Process each filter set if included by filtersets parameter value
          record.var-name: filterset
          if: ${filtersetsArray==null || filtersetsArray.contains(filterset.title) || filtersetsArray.contains(filterset.guid) || (filtersetsArray.contains('default') && filterset.defaultFilterSet)}
          do: 
            - log.progress: Loading ${filterset.title} filter set data
            # Collect filter sets
            - var.set:
                filtersets..: ${filterset}
            # Collect issue counts for current filter set and each analysis type
            - records.for-each:
                record.var-name: analysisType
                from: ${analysisTypes}
                do:
                  # Load SSC issue counts by folder for current filter set and analysis type
                  - rest.call:
                      issueGroupsByFolder:
                        uri:  /api/v1/projectVersions/${av.id}/issueGroups
                        query:
                          qm: issues
                          groupingtype: FOLDER
                          filter: ISSUE[11111111-1111-1111-1111-111111111151]:${analysisType.guid}
                          filterset: ${filterset.guid}
                        type: paged
                        records.for-each:
                          record.var-name: issueGroupFolder
                          do:
                            # Collect issue count by filter set, analysis type & folder
                            - var.set:
                                folder: ${filterset.title+':'+analysisType.displayName+':'+issueGroupFolder.id}
                                issueCountsByFolder.${folder}: ${issueGroupFolder.visibleCount}
                      issueGroupsByState:
                        uri:  /api/v1/projectVersions/${av.id}/issueGroups
                        query:
                          qm: issues
                          groupingtype: 11111111-1111-1111-1111-111111111167
                          filter: ISSUE[11111111-1111-1111-1111-111111111151]:${analysisType.guid}
                          filterset: ${filterset.guid}
                          showremoved: true
                        type: paged
                        records.for-each:
                          record.var-name: issueGroupState
                          do:
                            # Collect issue count by filter set, analysis type & issue state
                            - var.set:
                                state: ${filterset.title+':'+analysisType.displayName+':'+issueGroupState.id}
                                issueCountsByState.${state}: ${issueGroupState.visibleCount}
                            
  - log.progress: Generating output data
  
  # For each filter set, generate the issue counts table
  - records.for-each:
      record.var-name: filterset
      from: ${filtersets}
      do:
        # Clear variables for each filter set being processed
        - var.rm:
          - folderNames
          - issueCountByFolderRows
          - issueCountByStateRows
        - var.set:
            folderTotals: ${{:}}
            stateTotals: ${{:}}
        # Collect folder names from current filter set
        - records.for-each:
            record.var-name: folderName
            from: ${filterset.folders.![name]}
            do:
              - var.set:
                  folderNames..: ${folderName}
        # For current filter set, generate an issue count table row for each analysis type
        - records.for-each: 
            record.var-name: analysisTypeName
            if:   ${analysisTypes!=null}
            from: ${analysisTypes.![displayName]}
            do:
              # Clear counts for each analysis type being processed
              - var.rm:
                - issueCountByFolderRowValues
              # For each folder, collect issue counts for current filter set & analysis type
              - records.for-each:
                  record.var-name: folderName
                  from: ${filterset.folders.![name]}
                  do:
                  - var.set:
                      folderIssueCount: ${issueCountsByFolder==null?0:issueCountsByFolder[filterset.title+':'+analysisTypeName+':'+folderName]?:0}
                      issueCountByFolderRowValues..: ${folderIssueCount}
                      folderTotals.${folderName}: ${folderIssueCount + (folderTotals[folderName]?:0)}
              # Generate issue count row for current filter set and analysis type, listing
              # issue counts as collected above
              - var.set:
                  issueCountByFolderRows..: "| ${#fmt('%-22s', '**'+analysisTypeName+'**')} | ${#formatDateTime(dateFmt, lastScans[analysisTypeName].uploadDate)} | ${#join(' | ', issueCountByFolderRowValues.![#fmt('%10s', #this)])} |"
        # For current filter set, generate an issue count table row for each issue state
        - records.for-each: 
            record.var-name: analysisTypeName
            if:   ${analysisTypes!=null}
            from: ${analysisTypes.![displayName]}
            do:
              # Clear counts for each analysis type being processed
              - var.rm:
                - issueCountByStateRowValues
              # For each issue state, collect issue counts for current filter set & analysis type
              - records.for-each:
                  record.var-name: stateName
                  from: ${issueStateNames}
                  do:
                  - var.set:
                      stateIssueCount: ${issueCountsByState==null?0:issueCountsByState[filterset.title+':'+analysisTypeName+':'+stateName]?:0}
                      issueCountByStateRowValues..: ${stateIssueCount}
                      stateTotals.${stateName}: ${stateIssueCount + (stateTotals[stateName]?:0)}
              # Generate issue count row for current filter set and analysis type, listing
              # issue counts as collected above
              - var.set:
                  issueCountByStateRows..: "| ${#fmt('%-22s', '**'+analysisTypeName+'**')} | ${#formatDateTime(dateFmt, lastScans[analysisTypeName].uploadDate)} | ${#join(' | ', issueCountByStateRowValues.![#fmt('%13s', #this)])} |"        
        # Combine the output of the steps above to generate full issue counts table for current filter set  
        - var.set:
            issueCountsOutput..: |
              #### ${filterset.title} ${filterset.defaultFilterSet?'(default)':''}
              | Analysis Type          | Last Scan Date   | ${#join(' | ', folderNames.![#fmt('%10s', #this)])} | 
              | ---------------------- | ---------------- | ${#join(' | ', folderNames.!['----------'])} |
              ${#join('\n', issueCountByFolderRows)}
              | **Total**              |                  | ${#join(' | ', folderNames.![#fmt('%10s', #root.folderTotals?.getRealNode()?.get(#this)?:0)])} |
              
              | Analysis Type          | Last Scan Date   | New           | Re-introduced | Removed`*`    | Updated       | 
              | ---------------------- | ---------------- | ------------- | ------------- | ------------- | ------------- |
              ${#join('\n', issueCountByStateRows)}
              | **Total**              |                  | ${#join(' | ', issueStateNames.![#fmt('%13s', #root.stateTotals?.getRealNode()?.get(#this)?:0)])} |
              
              `*` The 'Removed' column shows the total number of removed issues for this application version, which includes issues removed in previous scans.
              
  # Write output based on data collected above, and value template defined below 
  - out.write:
      ${cli.file}: {fmt: summary-md}
  - if: ${!{'stdout','stderr'}.contains(cli.file)}
    log.info: Output written to ${cli.file}

formatters:
  summary-md: |
      # SSC Application Version Summary
      
      ## [${av.project.name} - ${av.name}](${#ssc.appversionBrowserUrl(av,null)})
      
      Summary generated on: ${#formatDateTime(dateFmt)}
      
      The tables below display summaries for all analysis types available in this application 
      version, which may include analysis types that were not updated by the current scan job,
      for example because this scan job didn't run that type of analysis, or because the analysis
      failed. You can verify this by matching the displayed 'Last Scan Date' against the summary
      date listed above. 
      
      ### Issue Counts
      
      ${#join('\n', issueCountsOutput)}
      
