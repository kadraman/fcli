# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-dev-2.x.json

# For now, github-sast-report and sarif-sast-report actions are exactly the same, apart from the
# following:
# - Different usage information
# - Different default Optional output file name 
# - The sarif-report doesn't impose a limit of 1000 issues
# The reason for having two similar but separate actions is two-fold:
# - We want to explicitly show that fcli supports both GitHub Code Scanning integration (which 
#   just happens to be based on SARIF) and generic SARIF capabilities.
# - Potentially, outputs for GitHub and generic SARIF may deviate in the future, for example if 
#   we want to add SARIF properties that are not supported by GitHub.
# Until the latter situation arises, we should make sure though that both actions stay in sync;
# when updating one, the other should also be updated. and ideally we should have functional tests
# that compare the outputs of both actions. 

author: Fortify
usage:
  header: Generate a GitHub Code Scanning report listing SSC SAST vulnerabilities.  
  description: |
    For information on how to import this report into GitHub, see 
    https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github

config:
  rest.target.default: ssc
  
cli.options:
  file:
    names: --file, -f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: gh-fortify-sast.sarif"
    required: false
    default: gh-fortify-sast.sarif
  appversion:
    names: --appversion, --av
    description: "Required application version id or <appName>:<versionName>"
  filterset:
    names: --filterset, --fs
    description: "Filter set name or guid from which to load issue data. Default value: Default filter set for given application version"
    required: false
  page-size:
    names: --page-size
    description: "Number of vulnerabilities to retrieve at a time. Higher numbers may reduce time required to build the report, at the cost of increased memory usage (on both fcli and SSC), and could potentially negatively affect overall SSC performance or result in read time-outs (see --socket-timeout option on fcli ssc session login command). Default value: 100"
    required: false
    default: "100"
  
steps:
  - var.set:
      av: ${#ssc.appVersion(cli.appversion)}
      fs: ${#ssc.filterSet(av, cli.filterset)}
  - log.progress: Loading latest static scan
  - rest.call:
      artifacts:
        uri:  /api/v1/projectVersions/${av.id}/artifacts
        type: paged
        query:
          embed: scans
        records.for-each:
          record.var-name: artifact
          breakIf: ${lastStaticScan!=null}
          do:
            - var.set:
                lastStaticScan: ${artifact._embed.scans?.^[type=='SCA']}
  - log.progress: Processing issue data
  - rest.call:
      issues:
        uri: /api/v1/projectVersions/${av.id}/issues
        query:
          filter: ISSUE[11111111-1111-1111-1111-111111111151]:SCA
          filterset: ${fs.guid}
          limit: ${cli['page-size']}
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
        on.success:
          - if: ${issues_raw.count>5000}
            throw: GitHub does not support importing more than 5000 vulnerabilities. Please clean the scan results or update vulnerability search criteria.
        records.for-each:
          record.var-name: issue
          embed:
            details:
              uri: /api/v1/issueDetails/${issue.id}
          do:
            - var.set:
                ruleCategories.${issue.primaryRuleGuid}: ${issue.issueName}
                results..: {fmt: results}
  - log.progress: Processing rule data
  - records.for-each:
      if: ${ruleCategories!=null}
      from: ${#ssc.ruleDescriptionsProcessor(av.id)}
      record.var-name: rule
      do:
        - if: ${#isNotBlank(ruleCategories[rule.id])}
          var.set:
            rules..: {fmt: rules}
  - out.write:
      ${cli.file}: {fmt: github-sast-report}
  - if: ${!{'stdout','stderr'}.contains(cli.file)}
    log.info: Output written to ${cli.file}

formatters:
  github-sast-report:
      "$schema": https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json 
      version: '2.1.0'
      runs:
        - tool:
            driver:
              name: 'Fortify SCA'   
              version: ${lastStaticScan?.engineVersion?:'unknown'}
              rules: ${rules?:{}}
              properties:
                copyright: ${#copyright()}
                applicationName: ${av.project.name}
                applicationId: ${av.project.id}
                versionName: ${av.name}
                versionId: ${av.id}
          results: ${results?:{}} 
     
  rules:
      id: ${rule.id}
      shortDescription:
        text: ${ruleCategories[rule.id]}
      fullDescription:
        text: |
          ## ${ruleCategories[rule.id]}
          
          ${rule.abstract}
      help:
        text: |
          ${rule.explanation?:'No explanation available'}
          
          ## Recommendations
          
          ${rule.recommendations?:'Not available'}
          
          ## Tips
          
          ${#join('\n\n', rule.tips)?:'Not available'}
          
          ## References
          
          ${#numberedList(rule.references.![title
            +(#isNotBlank(publisher)?", "+publisher:"")
            +(#isNotBlank(author)?", "+author:"")
            +(#isNotBlank(source)?", "+source:"")])?:'Not available'}
            
          ${#copyright()}
        
  results:
      ruleId: ${issue.primaryRuleGuid}
      message: 
        text: ${issue.details?.brief} [More information](${#ssc.issueBrowserUrl(issue,fs)})
      level: ${(issue.friority matches "(Critical|High)") ? "warning":"note" }
      properties:
        security-severity: ${{Critical:10.0,High:8.9,Medium:6.9,Low:3.9}.get(issue.friority)+''}
        fortify-severity: ${issue.friority}
      partialFingerprints:
        issueInstanceId: ${issue.issueInstanceId}
      locations:
        - physicalLocation:
            artifactLocation:
              uri: ${issue.fullFileName}
            region:
              startLine: ${issue.lineNumber==0||issue.lineNumber==null?1:issue.lineNumber}
              endLine: ${issue.lineNumber==0||issue.lineNumber==null?1:issue.lineNumber}
              startColumn: ${1}  # Needs to be specified as an expression in order to end up as integer instead of string in JSON
              endColumn: ${80}
      codeFlows: |-
        ${ 
          issue.details?.traceNodes==null ? {}
            : 
            {{ 
                threadFlows: issue.details?.traceNodes.![{
                  locations: #this.![{
                    location: {
                        message: {
                            text: text
                        },
                        physicalLocation: {
                            artifactLocation: {
                                uri: fullPath
                            },
                            region: {
                                startLine: line==0||line==null?1:line
                            }
                        }
                    }
                  }] 
                }] 
            }} 
        }