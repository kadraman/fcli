/**
 * Copyright 2023 Open Text.
 *
 * The only warranties for products and services of Open Text 
 * and its affiliates and licensors ("Open Text") are as may 
 * be set forth in the express warranty statements accompanying 
 * such products and services. Nothing herein should be construed 
 * as constituting an additional warranty. Open Text shall not be 
 * liable for technical or editorial errors or omissions contained 
 * herein. The information contained herein is subject to change 
 * without notice.
 */
package com.fortify.cli.common.action.model;

import com.fasterxml.jackson.annotation.JsonClassDescription;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.formkiq.graalvm.annotations.Reflectable;
import com.fortify.cli.common.action.schema.SampleYamlSnippets;
import com.fortify.cli.common.spring.expression.SpelHelper;
import com.fortify.cli.common.spring.expression.wrapper.TemplateExpression;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Reflectable @NoArgsConstructor
@Data @EqualsAndHashCode(callSuper = true)
@JsonInclude(Include.NON_NULL)
@JsonTypeName("value-fmt")
@JsonClassDescription("""
        Define a value that is optionally formatted or generated by a given formatter. \
        This can be supplied as either a set of YAML properties or as a simple (string, boolean, ...) \
        value, in which case the simple value is used to set the 'value' property.
        """)
@SampleYamlSnippets({"""
        steps:
          - var.set: # Variable values demonstrate how 'value-fmt' may be specified
            var1: 'xyz'       # Plain string, without formatter
            var2: true        # Plain boolean, without formatter
            var3: ${expr}     # Plain expression, without formatter
            var4: {fmt:myFmt} # Only formatter, allowing formatter to reference all variables
            var5:             # Same as var4, but expanded YAML syntax
              fmt: myFmt      
            var6:             # Use the outcome of ${expr} as input for myFmt
              fmt:   myFmt    
              value: ${expr}
        """})
public class TemplateExpressionWithFormatter extends AbstractActionElementIf {
    @JsonPropertyDescription("""
        The optional value to use for this instruction, may be specified as an SpEL template \
        expression. If value is specified without formatter, the value will be used as-is.
        """)
    @JsonProperty(value = "value", required = false) private TemplateExpression value;
    @JsonPropertyDescription("""
        The optional formatter (as defined through the top-level 'formatters' instruction) to use
        for this instruction, may be specified as an SpEL template expression. \
        If 'value' is specified, the given value will be provided as input for the formatter. \
        If 'value' is not specified, the set of current action variables will be provided as \
        input for the formatter.
        """)
    @JsonProperty(value = "fmt", required = false) private TemplateExpression fmt;
    
    /** Allow for deserializing from string rather than object */
    public TemplateExpressionWithFormatter(String valueString) {
        this.value = SpelHelper.parseTemplateExpression(valueString);
    }
    
    /** Allow for deserializing from boolean rather than object */
    public TemplateExpressionWithFormatter(boolean booleanValue) {
        this(String.format("${%s}", booleanValue));
    }
    
    /** Allow for deserializing from integer rather than object */
    public TemplateExpressionWithFormatter(int intValue) {
        this(String.format("${%s}", intValue));
    }
    // TODO Add extra constructors, for example for other numeric types?
    
    @Override
    public void postLoad(Action action) {}
}
