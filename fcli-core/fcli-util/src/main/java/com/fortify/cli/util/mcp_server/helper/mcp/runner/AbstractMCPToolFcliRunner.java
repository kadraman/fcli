/**
 * Copyright 2023 Open Text.
 *
 * The only warranties for products and services of Open Text 
 * and its affiliates and licensors ("Open Text") are as may 
 * be set forth in the express warranty statements accompanying 
 * such products and services. Nothing herein should be construed 
 * as constituting an additional warranty. Open Text shall not be 
 * liable for technical or editorial errors or omissions contained 
 * herein. The information contained herein is subject to change 
 * without notice.
 */
package com.fortify.cli.util.mcp_server.helper.mcp.runner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fortify.cli.common.rest.unirest.GenericUnirestFactory;
import com.fortify.cli.util.mcp_server.helper.mcp.arg.MCPToolArgHandlers;

import io.modelcontextprotocol.server.McpSyncServerExchange;
import io.modelcontextprotocol.spec.McpSchema.CallToolRequest;
import io.modelcontextprotocol.spec.McpSchema.CallToolResult;
import picocli.CommandLine.Model.CommandSpec;

/**
 * Abstract {@link IMCPToolRunner} implementation that:
 * <ul>
 *  <li>Builds the fcli command to run using the configured {@link MCPToolArgHandlers} instance</li>
 *  <li>Passes this fcli command to the abstract {@link #execute(McpSyncServerExchange, CallToolRequest, String)} method</li>
 *  <li>Handles any exceptions thrown by the {@link #execute(McpSyncServerExchange, CallToolRequest, String)} method </li>
 * </ul>
 *
 * @author Ruud Senden
 */
abstract class AbstractMCPToolFcliRunner implements IMCPToolRunner {
    private static final Logger LOG = LoggerFactory.getLogger(AbstractMCPToolFcliRunner.class);
    protected abstract CommandSpec getCommandSpec();
    protected abstract MCPToolArgHandlers getToolSpecArgHelper();
    
    /**
     * Build full fcli command to execute, based on MCP tool arguments from the given request
     */
    private final String getFullCmd(CallToolRequest request) {
        var cmd = getCommandSpec().qualifiedName(" ");
        var args = request==null || request.arguments()==null ? "" : getToolSpecArgHelper().getFcliCmdArgs(request.arguments());
        return String.format("%s %s", cmd, args).trim();
    }
    
    /**
     * Call the {@link #execute(McpSyncServerExchange, CallToolRequest, String)} method using the
     * fcli command generated by the {@link #getFullCmd(CallToolRequest)} method, and handle any
     * exceptions.
     */
    @Override
    public CallToolResult run(McpSyncServerExchange exchange, CallToolRequest request) {
        var fullCmd = getFullCmd(request);
        try {
            return execute(exchange, request, fullCmd);
        } catch ( Exception e ) {
            LOG.error("Exception while running fcli command:\n\t"+fullCmd, e);
            return new CallToolResult(e.toString(), true);
        } finally {
            // To avoid connections being cached for the full lifetime of the MCP server, we
            // explicitly shut down all connections after each fcli command execution. This 
            // ensures that subsequent fcli invocations will recreate connections with up-to-date
            // session data. For example, if session URL or credentials are changed by the user
            // through a new session login command, or user logged out of a session, we don't want
            // cached connections to still use the old URL and authentication tokens.
            GenericUnirestFactory.shutdown();
        }
    }
    
    /**
     * Method to be implemented by subclasses to execute the given fcli command and return 
     * a {@link CallToolResult} instance. 
     */
    protected abstract CallToolResult execute(McpSyncServerExchange exchange, CallToolRequest request, String fullCmd);
}