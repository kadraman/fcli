apply plugin: 'java'
apply plugin: 'org.asciidoctor.jvm.convert'

apply from: "${sharedGradleScriptsDir}/fcli-java.gradle"

dependencies {
    implementation project("${fcliCommonRef}")
	implementation project("${fcliAppRef}")
	runtimeOnly 'info.picocli:picocli-codegen'
    implementation 'com.github.victools:jsonschema-generator:4.38.0'
    implementation 'com.github.victools:jsonschema-module-jackson:4.38.0'
}

ext {
    docsSrcDir                = "${projectDir}/src/docs"
	staticAsciiDocSrcDir      = "${docsSrcDir}/asciidoc/static"
    versionedAsciiDocSrcDir   = "${docsSrcDir}/asciidoc/versioned"
	asciiDocTemplatesSrcDir   = "${docsSrcDir}/asciidoc/templates"
	docsOutDir                = "${buildDir}/generated-docs"
    asciiDocOutDir            = "${docsOutDir}/asciidoc"
	asciiDocManPageOutDir     = "${asciiDocOutDir}/manpage"
	manpageOutDir             = "${docsOutDir}/manpage/output"
	htmlOutDir                = "${docsOutDir}/html"
	ghPagesOutDir             = "${docsOutDir}/gh-pages"
    ghPagesVersionedOutDir    = "${ghPagesOutDir}/versioned"
    ghPagesStaticOutDir       = "${ghPagesOutDir}/static"
    actionSchemaOutDir        = "${ghPagesStaticOutDir}/schemas/action"
}

task prepare {
    dependsOn(build)
    doLast {
        [docsOutDir, asciiDocOutDir, asciiDocManPageOutDir, manpageOutDir, htmlOutDir, ghPagesOutDir, actionSchemaOutDir].forEach {
            d -> mkdir d
        }
    }
}

task generateActionSchema(type: JavaExec) {
    dependsOn(prepare)
    classpath(sourceSets.main.runtimeClasspath, configurations.runtimeClasspath)
    main 'com.fortify.cli.common.action.schema.generator.GenerateActionSchema'
    // Pass whether this is an (fcli) development release, schema version and output dir
    args project.version.startsWith("0."), fcliActionSchemaVersion, actionSchemaOutDir
}

task generateAsciiDocActionDevelopment(type: JavaExec) {
    dependsOn(prepare)
    classpath = sourceSets.main.runtimeClasspath
    main 'com.fortify.cli.app.FortifyCLI'
    args 'action', 'run', '--on-unsigned=ignore', '--on-invalid-version=ignore', "${projectDir}/src/actions/generate-action-dev-doc.yaml", "--file=${asciiDocOutDir}/action-development.adoc"
}

task generateAsciiDocManPage(type: JavaExec) {
    dependsOn(prepare)
    // Outer task collects resource bundle properties by executing FortifyCLIResourceBundlePropertiesHelper,
    // which are then passed as system properties to the man page generator. This allows generated man pages
    // to list property values that are usually generated at fcli runtime.
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor)
    main 'com.fortify.cli.app.runner.util.FortifyCLIResourceBundlePropertiesHelper'
    standardOutput = new ByteArrayOutputStream()
    doLast {
      def docProperties = standardOutput.toString()
        .split('\n')
        .collectEntries { entry ->
            def pair = entry.split(':')
            [(pair.first()): pair.last()]
        }
      javaexec {
          classpath(configurations.runtimeClasspath, configurations.annotationProcessor)
          systemProperties = docProperties
          main 'picocli.codegen.docgen.manpage.ManPageGenerator'
          args fcliRootCommandsClassName, "--outdir=${asciiDocManPageOutDir}", "-v"
      }
    }
}

task generateAsciiDocGenericActions(type: JavaExec) {
    dependsOn(generateAsciiDocManPage)
    group = "Documentation"
    description = "Generate Generic Action AsciiDoc"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor)
    main 'com.fortify.cli.app.FortifyCLI'
    args "action", "asciidoc", "-d=${asciiDocManPageOutDir}", "-f=${asciiDocOutDir}/generic-actions.adoc"
}

task generateAsciiDocSSCActions(type: JavaExec) {
    dependsOn(generateAsciiDocManPage)
    group = "Documentation"
    description = "Generate SSC Action AsciiDoc"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor)
    main 'com.fortify.cli.app.FortifyCLI'
    args "ssc", "action", "asciidoc", "-d=${asciiDocManPageOutDir}", "-f=${asciiDocOutDir}/ssc-actions.adoc"
}

task generateAsciiDocFoDActions(type: JavaExec) {
    dependsOn(generateAsciiDocManPage)
    group = "Documentation"
    description = "Generate FoD Action AsciiDoc"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor)
    main 'com.fortify.cli.app.FortifyCLI'
    args "fod", "action", "asciidoc", "-d=${asciiDocManPageOutDir}", "-f=${asciiDocOutDir}/fod-actions.adoc"
}

task generateAsciiDocAll(type: Copy) {
    dependsOn(generateAsciiDocActionDevelopment, generateAsciiDocManPage, generateAsciiDocGenericActions, generateAsciiDocSSCActions, generateAsciiDocFoDActions)
	into "${asciiDocOutDir}"
	from("${versionedAsciiDocSrcDir}") {
        include "*.adoc"
    }
}

task generateManpageOutput(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    dependsOn(generateAsciiDocAll)
    forkOptions {
        jvmArgs("--add-opens","java.base/sun.nio.ch=ALL-UNNAMED","--add-opens","java.base/java.io=ALL-UNNAMED")
    }
    sourceDir = file("${asciiDocManPageOutDir}")
    outputDir = file("${manpageOutDir}")
    logDocuments = true
    outputOptions {
        backends = ['manpage']
    }
}

// Generate HTML documentation from AsciiDoc prepared by prepareAsciiDocForVersionedHtml
task asciiDoctorVersionedHtml(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    dependsOn(generateAsciiDocAll)
    forkOptions {
        jvmArgs("--add-opens","java.base/sun.nio.ch=ALL-UNNAMED","--add-opens","java.base/java.io=ALL-UNNAMED")
    }
    sourceDir = file("${asciiDocOutDir}")
    outputDir = file("${htmlOutDir}")
    logDocuments = true
    outputOptions {
        backends = ['html5']
    }
    attributes = [
            'toc'                 : 'left',
            'sectanchors'         : 'true',
            'docinfo'             : 'shared',
            'jekyll'              : false,
            'bannertitle'         : 'FCLI: The Universal Fortify CLI',
            'docversion'          : "${project.version}",
            'actionSchemaVersion' : "${fcliActionSchemaVersion}",
            'actionSchemaUrl'     : "${fcliActionSchemaUrl}"
    ]
    options = [
    	'template_dirs': [new File("${asciiDocTemplatesSrcDir}").absolutePath]
    ]
}

// Generate Jekyll HTML documentation from AsciiDoc prepared by prepareAsciiDocForVersionedHtml,
// to be deployed to a version-specific directory on the fcli gh-pages site
task asciiDoctorVersionedJekyll(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
	dependsOn(generateAsciiDocAll)
	forkOptions {
        jvmArgs("--add-opens","java.base/sun.nio.ch=ALL-UNNAMED","--add-opens","java.base/java.io=ALL-UNNAMED")
    }
    sourceDir = file("${asciiDocOutDir}")
    outputDir = file("${ghPagesVersionedOutDir}")
    logDocuments = true
    outputOptions {
        backends = ['html5']
    }
    attributes = [
            'toc'                 : 'left',
            'sectanchors'         : 'true',
            'docinfo'             : 'shared',
            'jekyll'              : true,
            'stylesheet'          : false,
            'bannertitle'         : 'FCLI: The Universal Fortify CLI',
            'docversion'          : "${project.version}",
            'actionSchemaVersion' : "${fcliActionSchemaVersion}",
            'actionSchemaUrl'     : "${fcliActionSchemaUrl}"
    ]
    options = [
    	'template_dirs': [new File("${asciiDocTemplatesSrcDir}").absolutePath]
    ]
}

// Generate Jekyll HTML documentation from AsciiDoc files in ${staticAsciiDocSrcDir}
// to be deployed to the root directory on the fcli gh-pages site
task asciiDoctorStaticJekyll(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
	forkOptions {
        jvmArgs("--add-opens","java.base/sun.nio.ch=ALL-UNNAMED","--add-opens","java.base/java.io=ALL-UNNAMED")
    }
    sourceDir = file("${staticAsciiDocSrcDir}")
    outputDir = file("${ghPagesStaticOutDir}")
    logDocuments = true
    outputOptions {
        backends = ['html5']
    }
    attributes = [
            'toc'         : 'left',
            'sectanchors' : 'true',
            'docinfo'     : 'shared',
            'jekyll'      : true,
            'stylesheet'  : false,
            'bannertitle' : 'FCLI: The Universal Fortify CLI',
            'docversion'  : "[select]",
            'revnumber'   : "none"
    ]
    options = [
    	'template_dirs': [new File("${asciiDocTemplatesSrcDir}").absolutePath]
    ]
}

// Zip the output of the asciiDoctorHtml task into ${releaseAssetsDir}
task distDocsVersionedHtml(type: Zip) {
    dependsOn 'asciiDoctorVersionedHtml'
    archiveFileName = "docs-html.zip"
    destinationDirectory = file("$releaseAssetsDir")
    from layout.buildDirectory.dir("${htmlOutDir}")
}

// Zip the output of the generateManpageOutput task into ${releaseAssetsDir}
task distDocsManpage(type: Zip) {
    dependsOn 'generateManpageOutput'
    archiveFileName = "docs-manpage.zip"
    destinationDirectory = file("$releaseAssetsDir")
    from layout.buildDirectory.dir("${manpageOutDir}")
}

// Zip the output of the asciiDoctorVersionJekyll task into ${releaseAssetsDir}
task distDocsVersionedJekyll(type: Zip) {
    dependsOn 'asciiDoctorVersionedJekyll'
    archiveFileName = "docs-gh-pages-versioned.zip"
    destinationDirectory = file("$distDir")
    from layout.buildDirectory.dir("${ghPagesVersionedOutDir}")
}

// Zip the output of the asciiDoctorStaticJekyl task into ${releaseAssetsDir}
task distDocsStaticJekyll(type: Zip) {
    dependsOn 'asciiDoctorStaticJekyll', 'generateActionSchema'
    archiveFileName = "docs-gh-pages-static.zip"
    destinationDirectory = file("$distDir")
    from layout.buildDirectory.dir("${ghPagesStaticOutDir}")
}

// Task to combine all distDocs* tasks
task dist {
    dependsOn 'distDocsVersionedHtml', 'distDocsManpage', 'distDocsVersionedJekyll', 'distDocsStaticJekyll'
}
